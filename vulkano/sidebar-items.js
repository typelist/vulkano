initSidebarItems({"enum":[["OomError","Error type returned by most Vulkan functions."]],"macro":[["buffer_slice_field!","Takes a `BufferSlice` that points to a struct, and returns a `BufferSlice` that points to a specific field of that struct."],["impl_vertex!","Implements the `Vertex` trait on a struct."],["ordered_passes_renderpass!","Builds a `CustomRenderPass` object that provides a safe wrapper around `UnsafeRenderPass`."],["pipeline_layout!","Call this macro with the layout of a pipeline to generate some helper structs that wrap around vulkano's unsafe APIs."],["single_pass_renderpass!","Builds a `CustomRenderPass` object that provides a safe wrapper around `UnsafeRenderPass`."]],"mod":[["buffer","Location in memory that contains data."],["command_buffer","Commands that the GPU will execute (includes draw commands)."],["descriptor","Collection of data and resources accessed by the shaders."],["device","Communication channel with a physical device."],["format","Declares all the formats of data and images supported by Vulkan."],["framebuffer","Targets on which your draw commands are executed."],["image","Images storage (1D, 2D, 3D, arrays, etc.)."],["instance","API entry point."],["memory","GPU-visible memory allocation."],["pipeline","Tells the Vulkan implementation how it should perform a graphical or compute operation."],["query","This module provides support for query pools."],["sampler","How to retreive data from an image within a shader."],["swapchain","Link between Vulkan and a window and/or the screen."],["sync","Synchronization primitives for Vulkan objects."]],"trait":[["SafeDeref","Alternative to the `Deref` trait. Contrary to `Deref`, must always return the same object."],["SynchronizedVulkanObject","Gives access to the internal identifier of an object."],["VulkanObject","Gives access to the internal identifier of an object."],["VulkanObjectU64",""],["VulkanObjectUsize",""]]});